{"version":3,"sources":["webpack:///static/13.de5e20c1.chunk.js","webpack:///./catalog/api-rocketjump.md?df43","webpack:///./catalog/api-rocketjump.md"],"names":["webpackJsonp","782","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","797"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/13.de5e20c1.chunk.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ 782:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(292).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(797)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./api-rocketjump.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./api-rocketjump.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 797:\n/***/ (function(module, exports) {\n\nmodule.exports = \"When you have composed all the logic you need, it is time to export generated actions, reducer, saga and selectors, and so make the real rocketjump!\\r\\n\\r\\nIn order to do this, you have to invoke the last `RocketJump Partial`.\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nconst output = myRocketJumpPartial()\\r\\n```\\r\\n\\r\\nIn order to be invokable, a `RocketJump Partial` **must** contain three additional properties. These properties **must** be defined in the last configuration object supplied to the definition of the `RocketJump Partial` you are invoking.\\r\\n\\r\\nExample\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nconst myRocketJumpPartial = rj(\\r\\n    rjPlugin1,\\r\\n    rjPlugin2,\\r\\n    {\\r\\n        /* other optional properties */\\r\\n\\r\\n        /* ----- THIS IS THE IMPORTANT PART ----- */\\r\\n        type: 'COOL_API_TYPE',\\r\\n        api: myAsyncFunction,\\r\\n        state: 'soCool'\\r\\n    }\\r\\n)\\r\\n```\\r\\n\\r\\n# Configuration settings\\r\\n## type *(string)*\\r\\nThis key configures the name of the asynchronous task you are going to generate. It is **mandatory** that this name is unique throughout your application, in order to avoid name clashes. The value of this key is used as a prefix to create action types that will be used in the saga to tame asynchronism:\\r\\n- `${type}_LOADING` is dispatched when the asynchronous operation starts\\r\\n- `${type}_SUCCESS` is dispatched when the asynchronous operation completes successfully\\r\\n- `${type}_FAILURE` is dispatched when the asynchronous operation completes with some error\\r\\n- `${type}_UNLOAD` is dispatched when the asynchronous operation is stopped and the state cleared\\r\\n\\r\\n## state *(string|selector|function|false)*\\r\\nThis key configures the base selector used to access data managed by this rocketJump instance.\\r\\nIt can be a string, a selector from [reselect](https://github.com/reduxjs/reselect) or a function.\\r\\n\\r\\nIf it is a string, it is used like a path to access the state object using [lodash.get](https://lodash.com/docs/#get).\\r\\nIf it is a selector, it will be used as a base selector to create nested selectors.\\r\\nIf it is a function, it will be called with the redux store as its first argument.\\r\\n\\r\\nIf it is `false`, both selectors and reducer creation is skipped. This is useful when you need only to run action driven side effect in rocketjump environment.\\r\\n\\r\\n## api *(function)*\\r\\nThis is the side effect, the asynchronous task incapsulated in this rocketjump instance. The function passed to this key must conform the following signature\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n(params: any) => Promise\\r\\n```\\r\\n\\r\\nThe params argument will contain the first argument passed to the generated `load` action.\\r\\n\\r\\nIt is important that this function returns a Promise that resolves on valid data and rejects in case any error occurs. This allows the saga to launch the task and observe the outcome, reacting properly to eventual errors.\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/13.de5e20c1.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../node_modules/raw-loader/index.js!./api-rocketjump.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./api-rocketjump.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./api-rocketjump.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/api-rocketjump.md\n// module id = 782\n// module chunks = 13","module.exports = \"When you have composed all the logic you need, it is time to export generated actions, reducer, saga and selectors, and so make the real rocketjump!\\r\\n\\r\\nIn order to do this, you have to invoke the last `RocketJump Partial`.\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nconst output = myRocketJumpPartial()\\r\\n```\\r\\n\\r\\nIn order to be invokable, a `RocketJump Partial` **must** contain three additional properties. These properties **must** be defined in the last configuration object supplied to the definition of the `RocketJump Partial` you are invoking.\\r\\n\\r\\nExample\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nconst myRocketJumpPartial = rj(\\r\\n    rjPlugin1,\\r\\n    rjPlugin2,\\r\\n    {\\r\\n        /* other optional properties */\\r\\n\\r\\n        /* ----- THIS IS THE IMPORTANT PART ----- */\\r\\n        type: 'COOL_API_TYPE',\\r\\n        api: myAsyncFunction,\\r\\n        state: 'soCool'\\r\\n    }\\r\\n)\\r\\n```\\r\\n\\r\\n# Configuration settings\\r\\n## type *(string)*\\r\\nThis key configures the name of the asynchronous task you are going to generate. It is **mandatory** that this name is unique throughout your application, in order to avoid name clashes. The value of this key is used as a prefix to create action types that will be used in the saga to tame asynchronism:\\r\\n- `${type}_LOADING` is dispatched when the asynchronous operation starts\\r\\n- `${type}_SUCCESS` is dispatched when the asynchronous operation completes successfully\\r\\n- `${type}_FAILURE` is dispatched when the asynchronous operation completes with some error\\r\\n- `${type}_UNLOAD` is dispatched when the asynchronous operation is stopped and the state cleared\\r\\n\\r\\n## state *(string|selector|function|false)*\\r\\nThis key configures the base selector used to access data managed by this rocketJump instance.\\r\\nIt can be a string, a selector from [reselect](https://github.com/reduxjs/reselect) or a function.\\r\\n\\r\\nIf it is a string, it is used like a path to access the state object using [lodash.get](https://lodash.com/docs/#get).\\r\\nIf it is a selector, it will be used as a base selector to create nested selectors.\\r\\nIf it is a function, it will be called with the redux store as its first argument.\\r\\n\\r\\nIf it is `false`, both selectors and reducer creation is skipped. This is useful when you need only to run action driven side effect in rocketjump environment.\\r\\n\\r\\n## api *(function)*\\r\\nThis is the side effect, the asynchronous task incapsulated in this rocketjump instance. The function passed to this key must conform the following signature\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n(params: any) => Promise\\r\\n```\\r\\n\\r\\nThe params argument will contain the first argument passed to the generated `load` action.\\r\\n\\r\\nIt is important that this function returns a Promise that resolves on valid data and rejects in case any error occurs. This allows the saga to launch the task and observe the outcome, reacting properly to eventual errors.\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/api-rocketjump.md\n// module id = 797\n// module chunks = 13"],"sourceRoot":""}