{"version":3,"sources":["webpack:///static/5.df584429.chunk.js","webpack:///./catalog/plugins/hor.md?3072","webpack:///./catalog/plugins/hor.md"],"names":["webpackJsonp","788","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","803"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/5.df584429.chunk.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 788:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(292).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(803)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./hor.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./hor.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 803:\n/***/ (function(module, exports) {\n\nmodule.exports = \"Hor Plugin contains some useful functions that create reducers. This is provided in order to easily create reducers for common tasks, like adding elements to a list, removing elements from a list or updating complex structures.\\r\\n\\r\\n## Update reducer\\r\\nHelper name: `makeUpdateReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage update actions. It can be applied to states that have either a scalar or an array structure, like in the following examples\\r\\n\\r\\n```code\\r\\nlang: js\\r\\nspan: 3\\r\\n---\\r\\n// Scalar structured state\\r\\n{\\r\\n    loading: false,\\r\\n    error: null,\\r\\n    data: {\\r\\n        id: 23,\\r\\n        name: '@theReal',\\r\\n        work: 'Pick Up Girlz',\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n```code\\r\\nlang: js\\r\\nspan: 3\\r\\n---\\r\\n// Vector structured state\\r\\n{\\r\\n    loading: false,\\r\\n    error: null,\\r\\n    data: [\\r\\n        {\\r\\n            id: 23,\\r\\n            name: '@theReal',\\r\\n            work: 'Pick Up Girlz',\\r\\n        }, {\\r\\n            id: 23,\\r\\n            name: '@theReal',\\r\\n            work: 'Pick Up Girlz',\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n\\r\\nMoreover, the update can be set to happen at any depth\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n    loading: false,\\r\\n    log: ['~'],\\r\\n    data: {\\r\\n        id: 23,\\r\\n        name: 'Gio Va',\\r\\n        friends: {\\r\\n            other: {},\\r\\n            best: {\\r\\n                withMoney: {\\r\\n                    // Update might be specified to happen here\\r\\n                    id: 10,\\r\\n                    name: 'MR M$X',\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nThe reducer creation takes several parameters\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeUpdateReducer(type, path, identity, updater)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n\\r\\n#### path\\r\\nType: string\\r\\nDefault value: `'data'`\\r\\n\\r\\nThis attribute specifies the path to write data at\\r\\n\\r\\n\\r\\n#### identity\\r\\nType: function\\r\\nDefault value: `(action, object) => action.meta.id === object.id`\\r\\n\\r\\nThis function is used to determine if an action targets a specific object or not, that is, whether the update carried out by `action` is to be applied to the `object`\\r\\n\\r\\n#### updater\\r\\nType: function\\r\\nDefault value: `(action, object) => action.payload.data`\\r\\n\\r\\nThis function is used to apply the update carried out by `action` to the object `object`. By default, content is overridden by the action payload.\\r\\n\\r\\n## ListRemove reducer\\r\\nHelper name: `makeRemoveListReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage deletion of elements contained in a list. It is usually used to handle deletion of data organized in a [list](/plugins/list) structure\\r\\n\\r\\nSyntax\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeRemoveListReducer(type, listPath, paginationPath, identity)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n#### listPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores its elements\\r\\n\\r\\n#### paginationPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores information about pagination\\r\\n\\r\\n#### identity\\r\\nType: function\\r\\nDefault value: `(action, object) => action.meta.id === object.id`\\r\\n\\r\\nThis function is used to determine if an action targets a specific object or not, that is, whether the update carried out by `action` is to be applied to the `object`\\r\\n\\r\\n## ListAdd reducer\\r\\nHelper name: `makeAddListReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage insertion of elements in a list. It is usually used to handle insertion of data a [list](/plugins/list) based structure\\r\\n\\r\\nSyntax\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeAddListReducer(type, listPath, paginationPath, addToList)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n#### listPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores its elements\\r\\n\\r\\n#### paginationPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores information about pagination\\r\\n\\r\\n#### addToList\\r\\nType: function\\r\\nDefault value: `(list, action) => list.concat(action.payload.data)`\\r\\n\\r\\nThis function is used to actually insert the element in the array that implements the list, and can be used to set a customary insertion logic (append, prepend, in order insert, ...)\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/5.df584429.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./hor.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./hor.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./hor.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/plugins/hor.md\n// module id = 788\n// module chunks = 5","module.exports = \"Hor Plugin contains some useful functions that create reducers. This is provided in order to easily create reducers for common tasks, like adding elements to a list, removing elements from a list or updating complex structures.\\r\\n\\r\\n## Update reducer\\r\\nHelper name: `makeUpdateReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage update actions. It can be applied to states that have either a scalar or an array structure, like in the following examples\\r\\n\\r\\n```code\\r\\nlang: js\\r\\nspan: 3\\r\\n---\\r\\n// Scalar structured state\\r\\n{\\r\\n    loading: false,\\r\\n    error: null,\\r\\n    data: {\\r\\n        id: 23,\\r\\n        name: '@theReal',\\r\\n        work: 'Pick Up Girlz',\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n```code\\r\\nlang: js\\r\\nspan: 3\\r\\n---\\r\\n// Vector structured state\\r\\n{\\r\\n    loading: false,\\r\\n    error: null,\\r\\n    data: [\\r\\n        {\\r\\n            id: 23,\\r\\n            name: '@theReal',\\r\\n            work: 'Pick Up Girlz',\\r\\n        }, {\\r\\n            id: 23,\\r\\n            name: '@theReal',\\r\\n            work: 'Pick Up Girlz',\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n\\r\\nMoreover, the update can be set to happen at any depth\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n    loading: false,\\r\\n    log: ['~'],\\r\\n    data: {\\r\\n        id: 23,\\r\\n        name: 'Gio Va',\\r\\n        friends: {\\r\\n            other: {},\\r\\n            best: {\\r\\n                withMoney: {\\r\\n                    // Update might be specified to happen here\\r\\n                    id: 10,\\r\\n                    name: 'MR M$X',\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nThe reducer creation takes several parameters\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeUpdateReducer(type, path, identity, updater)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n\\r\\n#### path\\r\\nType: string\\r\\nDefault value: `'data'`\\r\\n\\r\\nThis attribute specifies the path to write data at\\r\\n\\r\\n\\r\\n#### identity\\r\\nType: function\\r\\nDefault value: `(action, object) => action.meta.id === object.id`\\r\\n\\r\\nThis function is used to determine if an action targets a specific object or not, that is, whether the update carried out by `action` is to be applied to the `object`\\r\\n\\r\\n#### updater\\r\\nType: function\\r\\nDefault value: `(action, object) => action.payload.data`\\r\\n\\r\\nThis function is used to apply the update carried out by `action` to the object `object`. By default, content is overridden by the action payload.\\r\\n\\r\\n## ListRemove reducer\\r\\nHelper name: `makeRemoveListReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage deletion of elements contained in a list. It is usually used to handle deletion of data organized in a [list](/plugins/list) structure\\r\\n\\r\\nSyntax\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeRemoveListReducer(type, listPath, paginationPath, identity)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n#### listPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores its elements\\r\\n\\r\\n#### paginationPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores information about pagination\\r\\n\\r\\n#### identity\\r\\nType: function\\r\\nDefault value: `(action, object) => action.meta.id === object.id`\\r\\n\\r\\nThis function is used to determine if an action targets a specific object or not, that is, whether the update carried out by `action` is to be applied to the `object`\\r\\n\\r\\n## ListAdd reducer\\r\\nHelper name: `makeAddListReducer`\\r\\n\\r\\nThis helper generates a reducer that is suitable to manage insertion of elements in a list. It is usually used to handle insertion of data a [list](/plugins/list) based structure\\r\\n\\r\\nSyntax\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nmakeAddListReducer(type, listPath, paginationPath, addToList)\\r\\n```\\r\\n\\r\\n#### type\\r\\nType: string | string[]\\r\\n\\r\\nThis attribute specifies the base type for actions managed by this reducer. It is similar to the `type` attribute of a RocketJump configuration. In case it is an array, the reducer will respond to actions derived from all the types contained in the array\\r\\n\\r\\n#### listPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores its elements\\r\\n\\r\\n#### paginationPath\\r\\nType: string\\r\\nDefault value: `'data.list'`\\r\\n\\r\\nThis attribute specifies the path where the list stores information about pagination\\r\\n\\r\\n#### addToList\\r\\nType: function\\r\\nDefault value: `(list, action) => list.concat(action.payload.data)`\\r\\n\\r\\nThis function is used to actually insert the element in the array that implements the list, and can be used to set a customary insertion logic (append, prepend, in order insert, ...)\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/plugins/hor.md\n// module id = 803\n// module chunks = 5"],"sourceRoot":""}