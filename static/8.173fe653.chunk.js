webpackJsonp([8],{785:function(e,n,r){var t=r(15),a=r(45),o=r(292).PageRenderer;o.__esModule&&(o=o.default);var c=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:r(800)}},componentWillMount:function(){},render:function(){return t.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});c.__catalog_loader__=!0,e.exports=c},800:function(e,n){e.exports="This plugin injects a caching dynamic in a RocketJump.\r\n\r\nThe cache works in the following way\r\n- when you instantiate a RocketJump, the cache is empty\r\n- when you first call the `load` function, result is extracted and copied in the cache\r\n- subsequent calls do not run the asynchronous effect, but directly resolve on the cached value\r\n- you can force the cache to refresh by leveraging an ad-hoc action: `loadForce`\r\n\r\n## Use cases\r\nYou can use this plugin whenever your data are not expected to change or changes are very unfrequent with respect to the number of calls to the `load` action. The usage of a cache in this context greatly helps with performance by removing delays due to asynchronous jobs\r\n\r\n## Example\r\n```code\r\nlang: js\r\n---\r\nimport rjCache from 'redux-rocketjump/plugins/cache';\r\n// other code here...\r\nconst {\r\n    actions: {\r\n        load,\r\n        loadForce,\r\n    },\r\n    reducer,\r\n    selectors: {\r\n        isLoading: isMyDataLoading,\r\n        getData: getMyData,\r\n        getError: getMyDataError\r\n    },\r\n    saga,\r\n} = rj(\r\n        rjCache,\r\n        {\r\n            type: 'MY_DATA',\r\n            state: 'myData',\r\n            api: fetchMyDataApi,\r\n        }\r\n    )()\r\n```\r\n\r\n"}});
//# sourceMappingURL=8.173fe653.chunk.js.map