{"version":3,"sources":["webpack:///static/11.de2d9fa4.chunk.js","webpack:///./catalog/getting-started.md?dd80","webpack:///./catalog/getting-started.md"],"names":["webpackJsonp","780","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","795"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/11.de2d9fa4.chunk.js","sourcesContent":["webpackJsonp([11],{\n\n/***/ 780:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(292).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(795)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./getting-started.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./getting-started.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 795:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# Installation guide\\r\\n## Create Redux-RocketJump environment\\r\\n\\r\\nRedux-RocketJump needs a specific environment to operate. You can install peer dependencies like this\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nyarn add redux redux-saga reselect\\r\\n```\\r\\n\\r\\nor if you prefer the good old NPM\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nnpm install --save redux redux-saga reselect\\r\\n```\\r\\n\\r\\n## Install Redux-RocketJump\\r\\nYou can install Redux-RocketJump using your package manager of choice\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nyarn add redux-rocketjump\\r\\n```\\r\\n\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nnpm install --save redux-rocketjump\\r\\n```\\r\\n\\r\\n# Your first RocketJump\\r\\nLet's start from a simple case, just to get familiar with RocketJump. Basically, RocketJump provides just a function able to generate actions, reducers, selectors and sagas for a given API. \\r\\n\\r\\nNow we are going to apply this function on a real case. Suppose we are developing a simple Todo app, and we want to fetch some ToDos from an asynchronous REST API. This requires just a plain GET request, which is, unsurprisigly, asynchronous! We can code the API call with a simple asynchronous function returning a Promise:\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nfunction loadTodosFromApi(params) {\\r\\n  let myHeaders = new Headers();\\r\\n\\r\\n  let config = { \\r\\n    method: 'GET',\\r\\n    headers: new Headers(),\\r\\n    body: params\\r\\n  };\\r\\n\\r\\n  return fetch('https://myawesomehost/api/posts', config)\\r\\n    .then(response => response.json())\\r\\n}\\r\\n```\\r\\n\\r\\nOk, now we are ready to integrate our `loadTodosFromApi` asynchronous operation with Redux data flow. In order to do this, we need to generate\\r\\n- some actions to handle the following events\\r\\n  - make the request\\r\\n  - request completes with success\\r\\n  - request completes with error\\r\\n- a reducer to manage these actions and update the state in a consisten way\\r\\n- some selectors to extract data from the state\\r\\n- a saga to wire all it up\\r\\n\\r\\nRedux-RocketJump can provide all these elements out of the box!\\r\\nThis is all we need\\r\\n- a name for the asynchronous task (it **must** be unique throughout your application)\\r\\n- a path that describes where to store data in the redux store\\r\\n- the asynchronous task we created before\\r\\n\\r\\nThis parameters must be passed in to RocketJump as a plain JavaScript object, like\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n  type: 'GET_TODOS',                        // The name of the task\\r\\n  state: 'todos',                           // The path to store data at\\r\\n  api: params => loadTodosFromApi(params)   // The asynchrous task\\r\\n}\\r\\n```\\r\\n\\r\\nWhat we get is an object containing action dispatchers, reducer, selectors and saga. The keys of this object are the following\\r\\n- **actions**: contains the actions dispatchers\\r\\n  - **load**: dispatches the action that starts the asynchronous task\\r\\n  - **unload**: dispatches an action to stop the asychronous task before it completes and to clear the state\\r\\n- **reducer**: contains the reducer that manages data related to this task, i.e. the output, the errors and the state of our request\\r\\n- **saga**: contains the saga that manages the side effects of the call\\r\\n- **selectors**: contains selectors to access data regarding this task\\r\\n  - **isLoading**: retrieves the loading state of the application (`true` if the task is pending, `false` otherwise)\\r\\n  - **getData**: retrieves the data returned from the call when it completes with success\\r\\n  - **getError**: retrieves the error returned from the call when it completes, if any\\r\\n\\r\\nNow, let's put all these things together\\r\\n\\r\\nThis is our state/todos.js file\\r\\n```code\\r\\nlang: jsx\\r\\n---\\r\\n// Import rocketjump (rj for friends) \\r\\nimport { rj } from 'redux-rocketjump'\\r\\n// Main export\\r\\n// Here we deal with actions, reducers, selectors and sagas that have been created for us\\r\\nexport const {\\r\\n  // Actions generated by rj\\r\\n  actions: {\\r\\n    // This is the function that triggers the side effect\\r\\n    load: loadTodos,\\r\\n    // This function stops the asynchronous task started with `load` and clears the state\\r\\n    unload: unloadTods,\\r\\n  },\\r\\n  // Selectors generated by rj\\r\\n  selectors: {\\r\\n    // Selector used to get the value returned by the asynchronous task, when ready\\r\\n    getData: getTodos,\\r\\n    // Selector used to detect if the asynchronous task is running (i.e. the API call is loading)\\r\\n    isLoading: isLoading,\\r\\n    // Selector used to get the error with which the last API call failed (if available)\\r\\n    getError: getTodsError,\\r\\n  },\\r\\n  // The generated reducer\\r\\n  reducer,\\r\\n  // The generated saga\\r\\n  saga,\\r\\n} = rj({\\r\\n  type: 'GET_TODOS',\\r\\n  state 'todos',\\r\\n  api: params => loadTodosFromApi(params),\\r\\n})()\\r\\n```\\r\\n\\r\\n```hint\\r\\nPlease note that the rj function returns another function! We have to invoke this second function to get the actual generated items.\\r\\nThe reasons of this necessity will be clarified in the API chapter\\r\\n```\\r\\n\\r\\nAnd this is our root state file (state/index.js)\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux'\\r\\nimport createSagaMiddleware from 'redux-saga'\\r\\nimport { makeAppsReducers, makeAppsSaga } from 'redux-rocketjump'\\r\\nimport * as todos from './todos'\\r\\n\\r\\n// Merge all our application parts\\r\\nconst APPS = {\\r\\n  todos\\r\\n}\\r\\n\\r\\n// Create root reducer\\r\\nconst rootReducer = combineReducers({\\r\\n  ...makeAppsReducers(APPS),\\r\\n})\\r\\n\\r\\n// Create main saga\\r\\nconst mainSaga = makeAppsSaga(APPS)\\r\\n\\r\\n// Initialize redux store\\r\\nconst preloadedState = undefined\\r\\nconst sagaMiddleware = createSagaMiddleware()\\r\\nconst store = createStore(\\r\\n  rootReducer,\\r\\n  preloadedState,\\r\\n  compose(\\r\\n    applyMiddleware(sagaMiddleware),\\r\\n  )\\r\\n)\\r\\n\\r\\n// Start main saga\\r\\nsagaMiddleware.run(mainSaga)\\r\\n\\r\\n// Export the created store\\r\\nexport default store\\r\\n```\\r\\n\\r\\nCongratulations, you have set up your first RocketJump with success!\\r\\n\\r\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/11.de2d9fa4.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../node_modules/raw-loader/index.js!./getting-started.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./getting-started.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./getting-started.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/getting-started.md\n// module id = 780\n// module chunks = 11","module.exports = \"# Installation guide\\r\\n## Create Redux-RocketJump environment\\r\\n\\r\\nRedux-RocketJump needs a specific environment to operate. You can install peer dependencies like this\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nyarn add redux redux-saga reselect\\r\\n```\\r\\n\\r\\nor if you prefer the good old NPM\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nnpm install --save redux redux-saga reselect\\r\\n```\\r\\n\\r\\n## Install Redux-RocketJump\\r\\nYou can install Redux-RocketJump using your package manager of choice\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nyarn add redux-rocketjump\\r\\n```\\r\\n\\r\\n\\r\\n```code\\r\\nlang: shell\\r\\n---\\r\\nnpm install --save redux-rocketjump\\r\\n```\\r\\n\\r\\n# Your first RocketJump\\r\\nLet's start from a simple case, just to get familiar with RocketJump. Basically, RocketJump provides just a function able to generate actions, reducers, selectors and sagas for a given API. \\r\\n\\r\\nNow we are going to apply this function on a real case. Suppose we are developing a simple Todo app, and we want to fetch some ToDos from an asynchronous REST API. This requires just a plain GET request, which is, unsurprisigly, asynchronous! We can code the API call with a simple asynchronous function returning a Promise:\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nfunction loadTodosFromApi(params) {\\r\\n  let myHeaders = new Headers();\\r\\n\\r\\n  let config = { \\r\\n    method: 'GET',\\r\\n    headers: new Headers(),\\r\\n    body: params\\r\\n  };\\r\\n\\r\\n  return fetch('https://myawesomehost/api/posts', config)\\r\\n    .then(response => response.json())\\r\\n}\\r\\n```\\r\\n\\r\\nOk, now we are ready to integrate our `loadTodosFromApi` asynchronous operation with Redux data flow. In order to do this, we need to generate\\r\\n- some actions to handle the following events\\r\\n  - make the request\\r\\n  - request completes with success\\r\\n  - request completes with error\\r\\n- a reducer to manage these actions and update the state in a consisten way\\r\\n- some selectors to extract data from the state\\r\\n- a saga to wire all it up\\r\\n\\r\\nRedux-RocketJump can provide all these elements out of the box!\\r\\nThis is all we need\\r\\n- a name for the asynchronous task (it **must** be unique throughout your application)\\r\\n- a path that describes where to store data in the redux store\\r\\n- the asynchronous task we created before\\r\\n\\r\\nThis parameters must be passed in to RocketJump as a plain JavaScript object, like\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n  type: 'GET_TODOS',                        // The name of the task\\r\\n  state: 'todos',                           // The path to store data at\\r\\n  api: params => loadTodosFromApi(params)   // The asynchrous task\\r\\n}\\r\\n```\\r\\n\\r\\nWhat we get is an object containing action dispatchers, reducer, selectors and saga. The keys of this object are the following\\r\\n- **actions**: contains the actions dispatchers\\r\\n  - **load**: dispatches the action that starts the asynchronous task\\r\\n  - **unload**: dispatches an action to stop the asychronous task before it completes and to clear the state\\r\\n- **reducer**: contains the reducer that manages data related to this task, i.e. the output, the errors and the state of our request\\r\\n- **saga**: contains the saga that manages the side effects of the call\\r\\n- **selectors**: contains selectors to access data regarding this task\\r\\n  - **isLoading**: retrieves the loading state of the application (`true` if the task is pending, `false` otherwise)\\r\\n  - **getData**: retrieves the data returned from the call when it completes with success\\r\\n  - **getError**: retrieves the error returned from the call when it completes, if any\\r\\n\\r\\nNow, let's put all these things together\\r\\n\\r\\nThis is our state/todos.js file\\r\\n```code\\r\\nlang: jsx\\r\\n---\\r\\n// Import rocketjump (rj for friends) \\r\\nimport { rj } from 'redux-rocketjump'\\r\\n// Main export\\r\\n// Here we deal with actions, reducers, selectors and sagas that have been created for us\\r\\nexport const {\\r\\n  // Actions generated by rj\\r\\n  actions: {\\r\\n    // This is the function that triggers the side effect\\r\\n    load: loadTodos,\\r\\n    // This function stops the asynchronous task started with `load` and clears the state\\r\\n    unload: unloadTods,\\r\\n  },\\r\\n  // Selectors generated by rj\\r\\n  selectors: {\\r\\n    // Selector used to get the value returned by the asynchronous task, when ready\\r\\n    getData: getTodos,\\r\\n    // Selector used to detect if the asynchronous task is running (i.e. the API call is loading)\\r\\n    isLoading: isLoading,\\r\\n    // Selector used to get the error with which the last API call failed (if available)\\r\\n    getError: getTodsError,\\r\\n  },\\r\\n  // The generated reducer\\r\\n  reducer,\\r\\n  // The generated saga\\r\\n  saga,\\r\\n} = rj({\\r\\n  type: 'GET_TODOS',\\r\\n  state 'todos',\\r\\n  api: params => loadTodosFromApi(params),\\r\\n})()\\r\\n```\\r\\n\\r\\n```hint\\r\\nPlease note that the rj function returns another function! We have to invoke this second function to get the actual generated items.\\r\\nThe reasons of this necessity will be clarified in the API chapter\\r\\n```\\r\\n\\r\\nAnd this is our root state file (state/index.js)\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux'\\r\\nimport createSagaMiddleware from 'redux-saga'\\r\\nimport { makeAppsReducers, makeAppsSaga } from 'redux-rocketjump'\\r\\nimport * as todos from './todos'\\r\\n\\r\\n// Merge all our application parts\\r\\nconst APPS = {\\r\\n  todos\\r\\n}\\r\\n\\r\\n// Create root reducer\\r\\nconst rootReducer = combineReducers({\\r\\n  ...makeAppsReducers(APPS),\\r\\n})\\r\\n\\r\\n// Create main saga\\r\\nconst mainSaga = makeAppsSaga(APPS)\\r\\n\\r\\n// Initialize redux store\\r\\nconst preloadedState = undefined\\r\\nconst sagaMiddleware = createSagaMiddleware()\\r\\nconst store = createStore(\\r\\n  rootReducer,\\r\\n  preloadedState,\\r\\n  compose(\\r\\n    applyMiddleware(sagaMiddleware),\\r\\n  )\\r\\n)\\r\\n\\r\\n// Start main saga\\r\\nsagaMiddleware.run(mainSaga)\\r\\n\\r\\n// Export the created store\\r\\nexport default store\\r\\n```\\r\\n\\r\\nCongratulations, you have set up your first RocketJump with success!\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/getting-started.md\n// module id = 795\n// module chunks = 11"],"sourceRoot":""}