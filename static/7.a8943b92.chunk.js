webpackJsonp([7],{786:function(e,n,t){var r=t(15),a=t(45),i=t(292).PageRenderer;i.__esModule&&(i=i.default);var o=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(801)}},componentWillMount:function(){},render:function(){return r.createElement(i,Object.assign({},this.props,{content:this.state.content}))}});o.__catalog_loader__=!0,e.exports=o},801:function(e,n){e.exports="The combine plugin is used to merge several rocketjumps in a dictionary-like fashion: this plugin accepts a dictionary containing [RocketJump Partials](/api/rocketpartial) and returns a complete RocketJump instance (already evaluated) that manages a state with the same structure of the original dictionary, but containing actual data in place of RocketJump Partials.\r\n\r\nRocketJump partials to be combined **must** meet the following criteria\r\n- each partial must have a configuration object at the last level of composition, which is called `combineConfig`\r\n- the `combineConfig` object can contain any attribute that is valid in the context of a `RocketJump Partial`\r\n- the `combineConfig` object **must** contain two special attributes\r\n  - **combineType**: will be used like the `type` attribute when completing the build of the partial\r\n  - **combineApi**: will be used like the `api` attribute when completing the build of the partial\r\n\r\nCombine plugin invocation takes two parameters\r\n```code\r\nlang: js\r\n---\r\ncombineRjs(dict, config);\r\n```\r\n\r\n`dict` is the aformentioned dictionary of composable partial rocketJumps, while `config` is a simple object containing only one key: `state`. This key can contain either a string or a selector, and plays the same role as the `state` parameter of a [final RocketJump configuration](/api/rocketjump)]\r\n\r\nExample\r\n```code\r\nlang: js\r\n---\r\n\r\n// This is a list plugin instance\r\nconst rjBaseList = rjList({\r\n    pagination: nextPreviousPaginationAdapter,\r\n    pageSize: 20,\r\n})\r\n\r\nconst { reducer } = combineRjs({\r\n    list: rj(rjBaseList, {\r\n        combineType: GET_BROS,\r\n        composeReducer: [\r\n            makeUpdateReducer(\r\n                SET_BRO_STARRED,\r\n                'data.list',\r\n                undefined,\r\n                ({ payload: { data: { starred } } }, obj) => ({ ...obj, starred }),\r\n            ),\r\n            makeRemoveListReducer(DELETE_BRO),\r\n            makeUpdateReducer(UPDATE_BRO, 'data.list'),\r\n        ],\r\n        combineApi: () => BROS,\r\n    }),\r\n\r\n    starring: rj(rjUpdate(), {\r\n        proxyActions: {\r\n            load: ({ load }) => (id, starred) =>\r\n                load({ id, starred }, { id }),\r\n        },\r\n        combineType: SET_BRO_STARRED,\r\n        // Return new \"starred\" state\r\n        combineApi: ({ id, starred }) => ({ id, starred }),\r\n    }),\r\n\r\n    deleting: rj(rjDelete(), {\r\n        combineType: DELETE_BRO,\r\n        // Such as 204 No Content\r\n        combineApi: () => null,\r\n    }),\r\n\r\n    updating: rj(rjUpdate(), {\r\n        combineType: UPDATE_BRO,\r\n        // Such as 204 No Content\r\n        combineApi: () => null,\r\n    })\r\n}, { state: 'bros' })\r\n```"}});
//# sourceMappingURL=7.a8943b92.chunk.js.map