{"version":3,"sources":["webpack:///static/4.d1334b1b.chunk.js","webpack:///./catalog/plugins/list.md?5684","webpack:///./catalog/plugins/list.md"],"names":["webpackJsonp","789","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","804"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/4.d1334b1b.chunk.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 789:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(292).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(804)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./list.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./list.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 804:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Use cases\\r\\n\\r\\nWhen interacting with a paginated REST API:\\r\\n\\r\\n- the API returns only a page of the collection at the time, with metadata specifying the position of the page and the total number of pages or objects in the collection.\\r\\n- some parameters are passed to API requests to identify the page we want to load\\r\\n\\r\\nThis plugins adds pagination state management and related selectors to get:\\r\\n- current, next and previous pages references\\r\\n- total items count\\r\\n\\r\\nSince pagination parametrization and metadata can be implemented with different strategies (page number pagination, limit-offset pagination, token-based pagination, etc.),\\r\\nthis plugin offers the possibility to use different adapters.\\r\\nSome common adapters are provided, specifically implemented for django-rest-framework pagination classes, but that may be used as a reference for other pagination adapters\\r\\n\\r\\n## Usage\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nimport { rj } from 'redux-rocketjump'\\r\\nimport rjList, { nextPreviousPaginationAdapter } from 'redux-rocketjump/plugins/list' \\r\\n\\r\\nconst GET_ITEMS = 'GET_ITEMS'\\r\\n\\r\\nconst {\\r\\n    selectors: {\\r\\n        getList: getItems,\\r\\n        getCount: getItemsCount,\\r\\n        getNumPages: getItemsNumPages,\\r\\n        getPrev: getItemsPrev,\\r\\n        getNext: getItemsNext,\\r\\n        hasPrev: hasItemsPrev,\\r\\n        hasNext: hasItemsNext,\\r\\n    },\\r\\n    actions: {\\r\\n        load: loadItems,\\r\\n        unload: unloadItems,\\r\\n    }\\r\\n} = rj(\\r\\n        rjList({\\r\\n            pageSize: 50,\\r\\n            pagination: nextPreviousPaginationAdapter\\r\\n        }),\\r\\n        {\\r\\n            state: 'items',\\r\\n            type: GET_ITEMS,\\r\\n            api: ({page}) => fetch(`http://example.com/items?page=${page}`)\\r\\n                .then(response => response.json())\\r\\n        }\\r\\n    )\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n### Creating a pagination adapter\\r\\nA pagination adapter is just a plain JavaScript object with a fixed interface. Any field can be a string or a selector. If it is a string, is will be used through lodash.get()\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n  \\r\\n  // When a request to the paginated API is made, this selector is used to extract actual data from response\\r\\n  list: 'results',\\r\\n  \\r\\n  // When a request to the paginated API is made, this selector is used to extract the number of data elements contained in the response\\r\\n  count: 'count',\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to determine the number of the loaded page \\r\\n  current: pickPage,\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the next page\\r\\n  // If there is no next page, this should return null\\r\\n  next: ({ next }) => pickParamsFromUrl(next, pickPage),\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the previous page\\r\\n  // If there is no previous page, this should return null\\r\\n  previous: ({ previous }) => pickParamsFromUrl(previous, pickPage),\\r\\n}\\r\\n```\\r\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/4.d1334b1b.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./list.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./list.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./list.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/plugins/list.md\n// module id = 789\n// module chunks = 4","module.exports = \"## Use cases\\r\\n\\r\\nWhen interacting with a paginated REST API:\\r\\n\\r\\n- the API returns only a page of the collection at the time, with metadata specifying the position of the page and the total number of pages or objects in the collection.\\r\\n- some parameters are passed to API requests to identify the page we want to load\\r\\n\\r\\nThis plugins adds pagination state management and related selectors to get:\\r\\n- current, next and previous pages references\\r\\n- total items count\\r\\n\\r\\nSince pagination parametrization and metadata can be implemented with different strategies (page number pagination, limit-offset pagination, token-based pagination, etc.),\\r\\nthis plugin offers the possibility to use different adapters.\\r\\nSome common adapters are provided, specifically implemented for django-rest-framework pagination classes, but that may be used as a reference for other pagination adapters\\r\\n\\r\\n## Usage\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\nimport { rj } from 'redux-rocketjump'\\r\\nimport rjList, { nextPreviousPaginationAdapter } from 'redux-rocketjump/plugins/list' \\r\\n\\r\\nconst GET_ITEMS = 'GET_ITEMS'\\r\\n\\r\\nconst {\\r\\n    selectors: {\\r\\n        getList: getItems,\\r\\n        getCount: getItemsCount,\\r\\n        getNumPages: getItemsNumPages,\\r\\n        getPrev: getItemsPrev,\\r\\n        getNext: getItemsNext,\\r\\n        hasPrev: hasItemsPrev,\\r\\n        hasNext: hasItemsNext,\\r\\n    },\\r\\n    actions: {\\r\\n        load: loadItems,\\r\\n        unload: unloadItems,\\r\\n    }\\r\\n} = rj(\\r\\n        rjList({\\r\\n            pageSize: 50,\\r\\n            pagination: nextPreviousPaginationAdapter\\r\\n        }),\\r\\n        {\\r\\n            state: 'items',\\r\\n            type: GET_ITEMS,\\r\\n            api: ({page}) => fetch(`http://example.com/items?page=${page}`)\\r\\n                .then(response => response.json())\\r\\n        }\\r\\n    )\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n### Creating a pagination adapter\\r\\nA pagination adapter is just a plain JavaScript object with a fixed interface. Any field can be a string or a selector. If it is a string, is will be used through lodash.get()\\r\\n\\r\\n```code\\r\\nlang: js\\r\\n---\\r\\n{\\r\\n  \\r\\n  // When a request to the paginated API is made, this selector is used to extract actual data from response\\r\\n  list: 'results',\\r\\n  \\r\\n  // When a request to the paginated API is made, this selector is used to extract the number of data elements contained in the response\\r\\n  count: 'count',\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to determine the number of the loaded page \\r\\n  current: pickPage,\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the next page\\r\\n  // If there is no next page, this should return null\\r\\n  next: ({ next }) => pickParamsFromUrl(next, pickPage),\\r\\n\\r\\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the previous page\\r\\n  // If there is no previous page, this should return null\\r\\n  previous: ({ previous }) => pickParamsFromUrl(previous, pickPage),\\r\\n}\\r\\n```\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/plugins/list.md\n// module id = 804\n// module chunks = 4"],"sourceRoot":""}