webpackJsonp([3],{790:function(e,n,r){var a=r(15),t=r(45),o=r(292).PageRenderer;o.__esModule&&(o=o.default);var s=t({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:r(805)}},componentWillMount:function(){},render:function(){return a.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,e.exports=s},805:function(e,n){e.exports="This plugin modifies the state shape into a dictionary shape. This is extremely useful when you have to work with omogeneous indexed data belonging to a collection. For example, any master-detail based API is a suitable candidate for the usage of this plugin\r\n\r\nThe map plugin works by changing the state shape, and adjusting selectors, actions and reducer accordingly.\r\n\r\nThe base state shape is\r\n```code\r\nlang: js\r\n---\r\n{\r\n    loading: false,\r\n    data: { /* some data */ },\r\n    error: null\r\n}\r\n```\r\n\r\nThis shape is replicated for each key to be stored, and the indexed replicas are used as the new state\r\n```code\r\nlang: js\r\n---\r\n{\r\n    key1: {\r\n        loading: false,\r\n        data: { /* some data */ },\r\n        error: null\r\n    },\r\n    key2: {\r\n        loading: false,\r\n        data: { /* some data */ },\r\n        error: null\r\n    },\r\n    /* and so on... */\r\n}\r\n```\r\n\r\nIn order to get this working, you need to configure a keyMakerFunction, that is, a function able to associate any dispatched action (among those regarding the mapped rocketjump) to a key in the store.\r\n\r\nThe default keyMakerFunction is the following\r\n```code\r\nlang: js\r\n---\r\naction => action.meta ? action.meta.id : null\r\n```\r\n\r\nAdditionally, you can provide your own custom [dataReducer](/api-rocketpartial) to describe how you want the `data` key of any state part to be managed\r\n\r\nThe map plugin provides you ad-hoc actions and selectors to interact with the state shape described beforehand\r\n\r\n\r\n**actions**\r\n- loadKey: performs standard load action on an item, given its key. The given id is passed to the api `params` object and copied into the `meta` object. Hence, the signature of this function is `(id, params, meta) => void`\r\n- unloadKey: performs standard unload action on an item, given its key\r\n\r\n**selectors**\r\n- getMapData: retrieves data key from any item, and returns them indexed by key\r\n- getMapLoadings: retrieves loading state from any item, and returns them indexed by key\r\n- getMapFailures: retrieves error key from any item, and returns them indexed by key\r\n\r\nBasically, provided selectors slice the state vertically:\r\n```code\r\nlang: js\r\n---\r\n// Suppose this is our state\r\nstate = {\r\n    users: {\r\n        23: {\r\n            loading: false,\r\n            data: data_23,\r\n            error: null\r\n        },\r\n        39: {\r\n            loading: false,\r\n            data: data_39,\r\n            error: null\r\n        },\r\n    }\r\n}\r\n\r\nlet x = getMapData(state);\r\n// x will contain the following structure\r\n{\r\n    23: data_23,\r\n    39: data_39\r\n}\r\n```\r\n\r\n## Example\r\n```code\r\nlang: js\r\n---\r\nimport rjMap from 'redux-rocketjump/plugins/map'\r\n\r\nconst { \r\n    actions: {\r\n        loadKey: loadUserByKey,\r\n        unloadKey: unloadUserByKey\r\n    },\r\n    reducer,\r\n    selectors: {\r\n        getMapLoadings: getUserLoadingState,\r\n        getMapData: getUserData,\r\n        getMapFailures: getUserError\r\n    },\r\n    saga\r\n} = rj(\r\n        rjMap({\r\n            keepSucceeded: true             // Set to false to remove elements from the map\r\n                                            // when the async task completes with success\r\n                                            // for them\r\n        }),\r\n        {\r\n            type: 'GET_USER',\r\n            state: 'users',\r\n            api: fetchUsers\r\n        }\r\n    )()\r\n```"}});
//# sourceMappingURL=3.a3c54418.chunk.js.map