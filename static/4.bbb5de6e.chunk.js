webpackJsonp([4],{789:function(e,t,n){var r=n(15),a=n(45),s=n(292).PageRenderer;s.__esModule&&(s=s.default);var i=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(804)}},componentWillMount:function(){},render:function(){return r.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});i.__catalog_loader__=!0,e.exports=i},804:function(e,t){e.exports="## Use cases\r\n\r\nWhen interacting with a paginated REST API:\r\n\r\n- the API returns only a page of the collection at the time, with metadata specifying the position of the page and the total number of pages or objects in the collection.\r\n- some parameters are passed to API requests to identify the page we want to load\r\n\r\nThis plugins adds pagination state management and related selectors to get:\r\n- current, next and previous pages references\r\n- total items count\r\n\r\nSince pagination parametrization and metadata can be implemented with different strategies (page number pagination, limit-offset pagination, token-based pagination, etc.),\r\nthis plugin offers the possibility to use different adapters.\r\nSome common adapters are provided, specifically implemented for django-rest-framework pagination classes, but that may be used as a reference for other pagination adapters\r\n\r\n## Usage\r\n\r\n```code\r\nlang: js\r\n---\r\nimport { rj } from 'redux-rocketjump'\r\nimport rjList, { nextPreviousPaginationAdapter } from 'redux-rocketjump/plugins/list' \r\n\r\nconst GET_ITEMS = 'GET_ITEMS'\r\n\r\nconst {\r\n    selectors: {\r\n        getList: getItems,\r\n        getCount: getItemsCount,\r\n        getNumPages: getItemsNumPages,\r\n        getPrev: getItemsPrev,\r\n        getNext: getItemsNext,\r\n        hasPrev: hasItemsPrev,\r\n        hasNext: hasItemsNext,\r\n    },\r\n    actions: {\r\n        load: loadItems,\r\n        unload: unloadItems,\r\n    }\r\n} = rj(\r\n        rjList({\r\n            pageSize: 50,\r\n            pagination: nextPreviousPaginationAdapter\r\n        }),\r\n        {\r\n            state: 'items',\r\n            type: GET_ITEMS,\r\n            api: ({page}) => fetch(`http://example.com/items?page=${page}`)\r\n                .then(response => response.json())\r\n        }\r\n    )()\r\n\r\n```\r\n\r\n\r\n### Creating a pagination adapter\r\nA pagination adapter is just a plain JavaScript object with a fixed interface. Any field can be a string or a selector. If it is a string, is will be used through lodash.get()\r\n\r\n```code\r\nlang: js\r\n---\r\n{\r\n  \r\n  // When a request to the paginated API is made, this selector is used to extract actual data from response\r\n  list: 'results',\r\n  \r\n  // When a request to the paginated API is made, this selector is used to extract the number of data elements contained in the response\r\n  count: 'count',\r\n\r\n  // When a request to the paginated API is made, this selector is used to determine the number of the loaded page \r\n  current: pickPage,\r\n\r\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the next page\r\n  // If there is no next page, this should return null\r\n  next: ({ next }) => pickParamsFromUrl(next, pickPage),\r\n\r\n  // When a request to the paginated API is made, this selector is used to extract the params to pass to the request to load the previous page\r\n  // If there is no previous page, this should return null\r\n  previous: ({ previous }) => pickParamsFromUrl(previous, pickPage),\r\n}\r\n```\r\n"}});
//# sourceMappingURL=4.bbb5de6e.chunk.js.map